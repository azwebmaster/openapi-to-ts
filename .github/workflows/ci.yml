name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build
      run: npm run build

    - name: Test with coverage
      run: npm run test:coverage

    - name: Generate coverage summary
      if: github.event_name == 'pull_request'
      run: |
        # Extract coverage summary from output
        echo "Coverage Summary:" > coverage-summary.txt
        echo "==================" >> coverage-summary.txt
        cat coverage/lcov.info | grep -E '^(SF:|FNF:|FNH:|LF:|LH:|BRF:|BRH:)' | \
        awk '
        BEGIN { files=0; funcs_found=0; funcs_hit=0; lines_found=0; lines_hit=0; branches_found=0; branches_hit=0 }
        /^SF:/ { files++ }
        /^FNF:/ { funcs_found += $2 }
        /^FNH:/ { funcs_hit += $2 }
        /^LF:/ { lines_found += $2 }
        /^LH:/ { lines_hit += $2 }
        /^BRF:/ { branches_found += $2 }
        /^BRH:/ { branches_hit += $2 }
        END {
          printf "Files: %d\n", files
          printf "Functions: %d/%d (%.1f%%)\n", funcs_hit, funcs_found, (funcs_found > 0 ? (funcs_hit/funcs_found)*100 : 0)
          printf "Lines: %d/%d (%.1f%%)\n", lines_hit, lines_found, (lines_found > 0 ? (lines_hit/lines_found)*100 : 0)
          printf "Branches: %d/%d (%.1f%%)\n", branches_hit, branches_found, (branches_found > 0 ? (branches_hit/branches_found)*100 : 0)
        }' >> coverage-summary.txt

    - name: Generate test summary
      if: github.event_name == 'pull_request'
      run: |
        echo "Test Results:" > test-summary.txt
        echo "=============" >> test-summary.txt
        if [ -f test-results.json ]; then
          jq -r '.testResults[] | "âœ… \(.name): \(.assertionResults | length) tests - \(if .status == "passed" then "PASSED" else "FAILED" end)"' test-results.json >> test-summary.txt || echo "Unable to parse test results" >> test-summary.txt
        else
          echo "Test results file not found" >> test-summary.txt
        fi

    - name: Save PR number
      if: github.event_name == 'pull_request'
      run: echo ${{ github.event.number }} > pr-number.txt

    - name: Upload coverage report
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage/lcov.info
          coverage-summary.txt

    - name: Upload test results
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test-results.json
          test-summary.txt

    - name: Upload PR number
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: pr-number
        path: pr-number.txt

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false